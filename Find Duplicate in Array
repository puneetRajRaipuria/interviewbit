Given a read only array of n + 1 integers between 1 and n, find one number that repeats in linear time using less than O(n) space and traversing the stream sequentially O(1) times.

Sample Input:

[3 4 1 4 1]
Sample Output:

1
If there are multiple possible answers ( like in the sample case above ), output any one.

If there is no duplicate, output -1


//Solutions #1
_______________


int Solution::repeatedNumber(const vector<int> &nums) {
       vector<int> arr;
      arr = A;
    for(int i =0;i<v.size();i++){
        if(v[abs(v[i])]<=0)return abs(v[i]);
        else{
            v[abs(v[i])] = -v[abs(v[i])]; 
        }
    }
    
   } 
   
   
   
  //Solutions #2
  
  int Solution::repeatedNumber(const vector<int> &nums) {
  
     set<int> s;

    for(int i =0;i<A.size();i++){
        if(s.end()== s.find(A[i])){
            s.insert(A[i]);
        }
        else{
            return (A[i]);
            }
        }
    
   }
   
   //Solution #3
    int Solution::repeatedNumber(const vector<int> &nums) {
       vector<int>*temp=(vector<int>*)&nums;
       sort(temp->begin(),temp->end());
       
       for(int i =0;i<nums.size();i++){
           if(nums[i]==nums[i+1]){
               return nums[i];
           }
       }
        

}

//Solution #4

 int countNo(vector<int>& nums,int mid){
        int count = 0;
        
        for(auto k:nums){
            if(k<=mid){
                count++;
            }
        }
        return count;
    }
    
int Solution::repeatedNumber(const vector<int> &nums) {
        
        int left  = 0;
        int right = nums.size();
        
        while(left<right){
            int mid = left+(right-left)/2;
            int count = countNo(nums,mid);
            if(count>mid) right = mid;
            else left = mid+1;
        }
        
        return left;
        
        
       } 
        
   
