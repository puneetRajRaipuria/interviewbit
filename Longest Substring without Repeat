Given a string,
find the length of the longest substring without repeating characters.

Example:

The longest substring without repeating letters for "abcabcbb" is "abc", which the length is 3.

For "bbbbb" the longest substring is "b", with the length of 1.

//Solution #1
//Brute Force

bool unique(string A,int start,int end){
    set<char>s;
    for(int i =start;i<end;i++)
    {
        char ss = A.at(i);
        if(s.find(ss) != s.end()){
            return false;
        }else{
            s.insert(ss);
        }
    }
    return true;
}

int Solution::lengthOfLongestSubstring(string A) {
    
    int n = A.size();
   
    
    if(n==1)return 1;
    int ans=1;
    
    for(int i =0;i<n;i++){
        for(int j = i+1;j<n;j++){
            if(unique(A,i,j)){
                cout<<j-i<<endl;
                ans = max(ans,j-i);
            }
        }
    }
    
    
   // Solution #2 (sliding window)
   
   int Solution::lengthOfLongestSubstring(string s) {
       int n =s.size();
        set<char>st;
        int ans = 0, i = 0, j = 0;
        while (i < n && j < n) {
            // try to extend the range [i, j]
            if (st.find(s.at(j))==st.end()){
                st.insert(s.at(j++));
                ans = max(ans, j - i);
            }
            else {
                st.erase(s.at(i++));
            }
        }
        return ans;
}
