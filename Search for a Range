Given a sorted array of integers A(0 based index) of size N, find the starting and ending position of a given integar B in array A.

Your algorithmâ€™s runtime complexity must be in the order of O(log n).

Return an array of size 2, such that first element = starting position of B in A and second element = ending position of B in A, if B is not found in A return [-1, -1].



Input Format
_____________
The first argument given is the integer array A.
The second argument given is the integer B.


Output Format
_____________

 Return an array of size 2, such that first element = starting position of B in A. 
 And second element = ending position of B in A, if B is not found in A return [-1, -1].
 
 For Example

Input 1:
    A = [5, 7, 7, 8, 8, 10]
    B = 8
Output 1:
    [3, 4]
Explanation 1:
    First occurence of 8 in A is at index 3
    Second occurence of 8 in A is at index 4
    ans = [3, 4]

Input 2:
    A = [5, 17, 100, 111]
    B = 3
Output 2:
    [-1, -1]
    
    
    
 //Solutions
 vector<int> Solution::searchRange(const vector<int> &A, int B) {
    
    
    auto first = lower_bound(begin(A),end(A),B);
    auto second =lower_bound(begin(A),end(A),B+1)-1;
    // cout<<*first<<endl;
    
     vector<int>v;
     if(*first==B){
             if(first != A.end()){
                 v.push_back(first-begin(A));
                 v.push_back(second-begin(A));
             }
     }
     else
     {
         v.push_back(-1);
         v.push_back(-1);
     }
     
     return v;
}
 
 
 
