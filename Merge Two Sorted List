Merge two sorted linked lists and return it as a new list.
The new list should be made by splicing together the nodes of the first two lists, and should also be sorted.

For example, given following linked lists :

  5 -> 8 -> 20 
  4 -> 11 -> 15
The merged list should be :

4 -> 5 -> 8 -> 11 -> 15 -> 20

//Soltuon #1
____________

 
ListNode* callMerge(ListNode*A,ListNode*B){
    if(A==nullptr){
        return B;
    }
    if(B==nullptr){
        return A;
    }
    if(A->val<=B->val){
       A->next =  callMerge(A->next,B);
      return A;
    }else{
       B->next =  callMerge(B->next,A);
      return B;
        }
} 
 
ListNode* Solution::mergeTwoLists(ListNode* A, ListNode* B) {
    
     if (A->val > B->val) std::swap(A,B);
    callMerge(A,B);
    return A;
}
//Solution #2
_____________

ListNode<int> * mergeTwoLinkedLists(ListNode<int> * l1, ListNode<int> * l2) {
if(!l1||(l2 && (l1->value > l2->value))) swap(l1,l2);
    if(l1) l1->next = mergeTwoLinkedLists(l1->next, l2);

    return l1; 

}
